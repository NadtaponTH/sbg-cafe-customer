<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Siam Board Games - Reports Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Sarabun:wght@300;400;500;600;700&display=swap');
        body { font-family: 'Sarabun', sans-serif; }
        
        .fade-in { animation: fadeIn 0.3s ease-in-out; }
        @keyframes fadeIn { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } }
        
        .stat-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            transition: transform 0.3s ease;
        }
        
        .stat-card:hover {
            transform: translateY(-4px);
        }
        
        .chart-container {
            position: relative;
            height: 300px;
            width: 100%;
        }
        
        .tab-button { transition: all 0.2s ease-in-out; }
        .tab-button.active { background-color: #3b82f6; color: white; transform: translateY(-1px); }
        
        .status-success { background-color: #d1fae5; color: #065f46; border-color: #10b981; }
        .status-error { background-color: #fee2e2; color: #991b1b; border-color: #ef4444; }
        .status-warning { background-color: #fef3c7; color: #92400e; border-color: #f59e0b; }
        
        .btn-primary { @apply bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors disabled:bg-gray-400; }
        .btn-secondary { @apply bg-gray-500 hover:bg-gray-600 text-white font-semibold py-3 px-6 rounded-lg transition-colors; }
        .btn-success { @apply bg-green-600 hover:bg-green-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors; }
    </style>
</head>
<body class="bg-gray-50 min-h-screen">
    <!-- Loading Screen -->
    <div id="loading-screen" class="fixed inset-0 bg-white flex items-center justify-center z-50">
        <div class="text-center">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
            <p class="text-gray-600">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô...</p>
        </div>
    </div>

    <!-- Header -->
    <header class="bg-white shadow-sm border-b">
        <div class="max-w-7xl mx-auto px-4 py-3">
            <div class="flex items-center justify-between">
                <div class="flex items-center space-x-4">
                    <h1 class="text-xl font-bold text-gray-800">üìä Siam Board Games - Reports</h1>
                    <span id="staff-badge" class="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-medium"></span>
                </div>
                <div class="flex items-center space-x-4">
                    <div class="flex items-center space-x-2">
                        <label class="text-sm text-gray-600">‡∏™‡∏≤‡∏Ç‡∏≤:</label>
                        <select id="branch-filter" class="border rounded-lg px-3 py-1 text-sm">
                            <option value="">‡∏ó‡∏∏‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤</option>
                            <option value="Bangna">Bangna</option>
                            <option value="Ngamwongwan">Ngamwongwan</option>
                            <option value="WestGate">WestGate</option>
                            <option value="EastVille">EastVille</option>
                        </select>
                    </div>
                    <button id="refresh-btn" class="btn-primary text-sm py-2 px-4">üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä</button>
                </div>
            </div>
        </div>
    </header>

    <!-- Main Container -->
    <main class="max-w-7xl mx-auto px-4 py-6">
        <!-- Status Message -->
        <div id="status-message" class="hidden p-4 rounded-lg border mb-6">
            <div class="flex items-center">
                <span id="status-icon" class="mr-2"></span>
                <span id="status-text"></span>
            </div>
        </div>

        <!-- Login Screen -->
        <div id="login-screen" class="max-w-md mx-auto bg-white rounded-xl shadow-lg p-8" style="display: none;">
            <div class="text-center mb-6">
                <h2 class="text-2xl font-bold text-gray-800">‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô</h2>
                <p class="text-gray-600 mt-2">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™ PIN ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô</p>
            </div>
            <form id="login-form" class="space-y-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">‡∏£‡∏´‡∏±‡∏™ PIN (4 ‡∏´‡∏•‡∏±‡∏Å)</label>
                    <input type="password" id="pin-input" 
                           class="w-full p-3 border border-gray-300 rounded-lg text-center text-2xl tracking-widest"
                           placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢" maxlength="4" inputmode="numeric">
                </div>
                <button type="submit" class="w-full btn-primary">
                    ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
                </button>
            </form>
        </div>

        <!-- Reports Interface -->
        <div id="reports-interface" class="hidden fade-in">
            
            <!-- Tab Navigation -->
            <div class="bg-white rounded-2xl shadow-lg mb-6 overflow-hidden">
                <div class="flex">
                    <button id="tab-dashboard" class="tab-button flex-1 py-4 px-6 font-semibold text-gray-600 bg-gray-50">
                        üìä ‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î
                    </button>
                    <button id="tab-daily" class="tab-button flex-1 py-4 px-6 font-semibold text-gray-600 bg-gray-50">
                        üìÖ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
                    </button>
                    <button id="tab-monthly" class="tab-button flex-1 py-4 px-6 font-semibold text-gray-600 bg-gray-50">
                        üìà ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
                    </button>
                    <button id="tab-customers" class="tab-button flex-1 py-4 px-6 font-semibold text-gray-600 bg-gray-50">
                        üë• ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
                    </button>
                </div>
            </div>

            <!-- Dashboard Tab -->
            <div id="dashboard-tab-content" class="tab-content hidden">
                <!-- Real-time Stats -->
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                    <div class="stat-card rounded-2xl p-6 text-white">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-blue-100">‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà</p>
                                <p id="active-sessions" class="text-3xl font-bold">-</p>
                            </div>
                            <div class="text-4xl">üéÆ</div>
                        </div>
                    </div>
                    
                    <div class="stat-card rounded-2xl p-6 text-white">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-blue-100">‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</p>
                                <p id="today-revenue" class="text-3xl font-bold">-</p>
                            </div>
                            <div class="text-4xl">üí∞</div>
                        </div>
                    </div>
                    
                    <div class="stat-card rounded-2xl p-6 text-white">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-blue-100">‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</p>
                                <p id="today-customers" class="text-3xl font-bold">-</p>
                            </div>
                            <div class="text-4xl">üë•</div>
                        </div>
                    </div>
                    
                    <div class="stat-card rounded-2xl p-6 text-white">
                        <div class="flex items-center justify-between">
                            <div>
                                <p class="text-blue-100">‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢</p>
                                <p id="avg-duration" class="text-3xl font-bold">-</p>
                            </div>
                            <div class="text-4xl">‚è±Ô∏è</div>
                        </div>
                    </div>
                </div>

                <!-- Active Sessions Table -->
                <div class="bg-white rounded-2xl shadow-lg p-6 mb-6">
                    <h3 class="text-lg font-semibold text-gray-800 mb-4">‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà</h3>
                    <div class="overflow-x-auto">
                        <table class="w-full text-sm">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="px-4 py-3 text-left">Session ID</th>
                                    <th class="px-4 py-3 text-left">‡∏™‡∏≤‡∏Ç‡∏≤</th>
                                    <th class="px-4 py-3 text-left">‡πÇ‡∏ï‡πä‡∏∞</th>
                                    <th class="px-4 py-3 text-left">‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</th>
                                    <th class="px-4 py-3 text-left">‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πà‡∏ô</th>
                                    <th class="px-4 py-3 text-left">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                                </tr>
                            </thead>
                            <tbody id="active-sessions-table">
                                <tr>
                                    <td colspan="6" class="px-4 py-8 text-center text-gray-500">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Today's Performance Chart -->
                <div class="bg-white rounded-2xl shadow-lg p-6">
                    <h3 class="text-lg font-semibold text-gray-800 mb-4">‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</h3>
                    <div class="chart-container">
                        <canvas id="today-chart"></canvas>
                    </div>
                </div>
            </div>

            <!-- Daily Reports Tab -->
            <div id="daily-tab-content" class="tab-content hidden">
                <!-- Date Selector -->
                <div class="bg-white rounded-2xl shadow-lg p-6 mb-6">
                    <div class="flex items-center justify-between mb-4">
                        <h3 class="text-lg font-semibold text-gray-800">‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô</h3>
                        <div class="flex items-center space-x-4">
                            <input type="date" id="daily-date" class="border rounded-lg px-3 py-2">
                            <button id="daily-export" class="btn-secondary text-sm py-2 px-4">üì• Export</button>
                        </div>
                    </div>
                </div>

                <!-- Daily Stats -->
                <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                    <div class="bg-white rounded-2xl shadow-lg p-6">
                        <div class="flex items-center justify-between mb-4">
                            <h4 class="font-semibold text-gray-800">‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ</h4>
                            <div class="text-2xl">üí∞</div>
                        </div>
                        <p id="daily-revenue" class="text-2xl font-bold text-green-600">‡∏ø0</p>
                        <p class="text-sm text-gray-500 mt-1">‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô <span id="daily-sessions">0</span> ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô</p>
                    </div>
                    
                    <div class="bg-white rounded-2xl shadow-lg p-6">
                        <div class="flex items-center justify-between mb-4">
                            <h4 class="font-semibold text-gray-800">‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</h4>
                            <div class="text-2xl">üë•</div>
                        </div>
                        <p id="daily-customers-count" class="text-2xl font-bold text-blue-600">0</p>
                        <p class="text-sm text-gray-500 mt-1">‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å <span id="daily-members">0</span> ‡∏Ñ‡∏ô</p>
                    </div>
                    
                    <div class="bg-white rounded-2xl shadow-lg p-6">
                        <div class="flex items-center justify-between mb-4">
                            <h4 class="font-semibold text-gray-800">‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢</h4>
                            <div class="text-2xl">‚è±Ô∏è</div>
                        </div>
                        <p id="daily-avg-duration" class="text-2xl font-bold text-purple-600">0 ‡∏ô‡∏≤‡∏ó‡∏µ</p>
                        <p class="text-sm text-gray-500 mt-1">‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô</p>
                    </div>
                </div>

                <!-- Hourly Chart -->
                <div class="bg-white rounded-2xl shadow-lg p-6 mb-6">
                    <h4 class="font-semibold text-gray-800 mb-4">‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á</h4>
                    <div class="chart-container">
                        <canvas id="hourly-chart"></canvas>
                    </div>
                </div>

                <!-- Popular Games -->
                <div class="grid md:grid-cols-2 gap-6">
                    <div class="bg-white rounded-2xl shadow-lg p-6">
                        <h4 class="font-semibold text-gray-800 mb-4">‡∏ï‡∏±‡πã‡∏ß‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°</h4>
                        <div id="popular-tickets" class="space-y-3">
                            <div class="text-center text-gray-500 py-4">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</div>
                        </div>
                    </div>
                    
                    <div class="bg-white rounded-2xl shadow-lg p-6">
                        <h4 class="font-semibold text-gray-800 mb-4">‡∏™‡∏≤‡∏Ç‡∏≤‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°</h4>
                        <div id="popular-branches" class="space-y-3">
                            <div class="text-center text-gray-500 py-4">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Monthly Reports Tab -->
            <div id="monthly-tab-content" class="tab-content hidden">
                <!-- Month Selector -->
                <div class="bg-white rounded-2xl shadow-lg p-6 mb-6">
                    <div class="flex items-center justify-between mb-4">
                        <h3 class="text-lg font-semibold text-gray-800">‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</h3>
                        <div class="flex items-center space-x-4">
                            <input type="month" id="monthly-period" class="border rounded-lg px-3 py-2">
                            <button id="monthly-export" class="btn-secondary text-sm py-2 px-4">üì• Export</button>
                        </div>
                    </div>
                </div>

                <!-- Monthly Overview -->
                <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
                    <div class="bg-white rounded-2xl shadow-lg p-6">
                        <div class="flex items-center justify-between mb-4">
                            <h4 class="font-semibold text-gray-800">‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°</h4>
                            <div class="text-2xl">üí∞</div>
                        </div>
                        <p id="monthly-revenue" class="text-2xl font-bold text-green-600">‡∏ø0</p>
                        <p id="monthly-growth" class="text-sm text-gray-500 mt-1">‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô</p>
                    </div>
                    
                    <div class="bg-white rounded-2xl shadow-lg p-6">
                        <div class="flex items-center justify-between mb-4">
                            <h4 class="font-semibold text-gray-800">‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h4>
                            <div class="text-2xl">üë•</div>
                        </div>
                        <p id="monthly-customers" class="text-2xl font-bold text-blue-600">0</p>
                        <p id="monthly-customer-growth" class="text-sm text-gray-500 mt-1">‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà</p>
                    </div>
                    
                    <div class="bg-white rounded-2xl shadow-lg p-6">
                        <div class="flex items-center justify-between mb-4">
                            <h4 class="font-semibold text-gray-800">‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h4>
                            <div class="text-2xl">üéÆ</div>
                        </div>
                        <p id="monthly-sessions" class="text-2xl font-bold text-purple-600">0</p>
                        <p id="monthly-session-growth" class="text-sm text-gray-500 mt-1">‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô</p>
                    </div>
                    
                    <div class="bg-white rounded-2xl shadow-lg p-6">
                        <div class="flex items-center justify-between mb-4">
                            <h4 class="font-semibold text-gray-800">‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô</h4>
                            <div class="text-2xl">üìä</div>
                        </div>
                        <p id="monthly-daily-avg" class="text-2xl font-bold text-orange-600">‡∏ø0</p>
                        <p class="text-sm text-gray-500 mt-1">‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢</p>
                    </div>
                </div>

                <!-- Monthly Trend Chart -->
                <div class="bg-white rounded-2xl shadow-lg p-6 mb-6">
                    <h4 class="font-semibold text-gray-800 mb-4">‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</h4>
                    <div class="chart-container">
                        <canvas id="monthly-trend-chart"></canvas>
                    </div>
                </div>

                <!-- Branch Performance -->
                <div class="bg-white rounded-2xl shadow-lg p-6">
                    <h4 class="font-semibold text-gray-800 mb-4">‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤</h4>
                    <div class="chart-container">
                        <canvas id="branch-performance-chart"></canvas>
                    </div>
                </div>
            </div>

            <!-- Customers Tab -->
            <div id="customers-tab-content" class="tab-content hidden">
                <!-- Customer Stats -->
                <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                    <div class="bg-white rounded-2xl shadow-lg p-6">
                        <div class="flex items-center justify-between mb-4">
                            <h4 class="font-semibold text-gray-800">‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h4>
                            <div class="text-2xl">üë§</div>
                        </div>
                        <p id="total-members" class="text-2xl font-bold text-blue-600">0</p>
                        <p class="text-sm text-gray-500 mt-1">‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô</p>
                    </div>
                    
                    <div class="bg-white rounded-2xl shadow-lg p-6">
                        <div class="flex items-center justify-between mb-4">
                            <h4 class="font-semibold text-gray-800">‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ</h4>
                            <div class="text-2xl">üÜï</div>
                        </div>
                        <p id="new-members" class="text-2xl font-bold text-green-600">0</p>
                        <p class="text-sm text-gray-500 mt-1">‡∏Ñ‡∏ô</p>
                    </div>
                    
                    <div class="bg-white rounded-2xl shadow-lg p-6">
                        <div class="flex items-center justify-between mb-4">
                            <h4 class="font-semibold text-gray-800">‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏à‡∏≥</h4>
                            <div class="text-2xl">‚≠ê</div>
                        </div>
                        <p id="regular-customers" class="text-2xl font-bold text-purple-600">0</p>
                        <p class="text-sm text-gray-500 mt-1">‡πÄ‡∏•‡πà‡∏ô‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</p>
                    </div>
                </div>

                <!-- Top Customers -->
                <div class="bg-white rounded-2xl shadow-lg p-6">
                    <h4 class="font-semibold text-gray-800 mb-4">‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ï‡πâ‡∏ô</h4>
                    <div class="overflow-x-auto">
                        <table class="w-full text-sm">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="px-4 py-3 text-left">‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö</th>
                                    <th class="px-4 py-3 text-left">‡∏ä‡∏∑‡πà‡∏≠</th>
                                    <th class="px-4 py-3 text-left">‡∏£‡∏´‡∏±‡∏™‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</th>
                                    <th class="px-4 py-3 text-left">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á</th>
                                    <th class="px-4 py-3 text-left">‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏°</th>
                                    <th class="px-4 py-3 text-left">‡∏¢‡∏≠‡∏î‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢</th>
                                </tr>
                            </thead>
                            <tbody id="top-customers-table">
                                <tr>
                                    <td colspan="6" class="px-4 py-8 text-center text-gray-500">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

        </div>
    </main>

    <script>
        // Configuration
        const API_URL = 'https://script.google.com/macros/s/AKfycby9ADm-WHoxdtQdtiyrePr4utg2aNzqI339z6RODoqqonoEoGwb4vp-LWm_7lmXhAPU5Q/exec';
        
        // Application State
        const state = {
            staff: null,
            currentTab: 'dashboard',
            charts: {},
            updateInterval: null
        };

        // Initialize Application
        document.addEventListener('DOMContentLoaded', async () => {
            try {
                console.log('=== REPORTS DASHBOARD INITIALIZATION ===');
                console.log('DOM loaded, starting initialization...');
                
                // Force hide loading and show login immediately
                setTimeout(() => {
                    console.log('Force hiding loading screen...');
                    const loadingScreen = document.getElementById('loading-screen');
                    const loginScreen = document.getElementById('login-screen');
                    
                    if (loadingScreen) {
                        loadingScreen.style.display = 'none';
                        console.log('‚úÖ Loading screen hidden');
                    }
                    
                    if (loginScreen) {
                        loginScreen.style.display = 'block';
                        console.log('‚úÖ Login screen shown');
                    }
                }, 100);
                
                setupEventListeners();
                setDefaultDates();
                console.log('‚úÖ Reports dashboard initialized successfully');
                
            } catch (error) {
                console.error('‚ùå Initialization error:', error);
                // Force show login even if error
                const loadingScreen = document.getElementById('loading-screen');
                const loginScreen = document.getElementById('login-screen');
                if (loadingScreen) loadingScreen.style.display = 'none';
                if (loginScreen) loginScreen.style.display = 'block';
            }
        });

        // API Functions
        async function apiGet(action, params = {}) {
            const url = new URL(API_URL);
            url.searchParams.append('action', action);
            Object.entries(params).forEach(([key, value]) => {
                url.searchParams.append(key, value);
            });

            const response = await fetch(url);
            if (!response.ok) throw new Error(`Network error: ${response.statusText}`);
            return await response.json();
        }

        // Utility Functions
        function showStatus(message, type = 'info', duration = 5000) {
            const statusMessage = document.getElementById('status-message');
            const statusText = document.getElementById('status-text');
            const statusIcon = document.getElementById('status-icon');
            
            statusMessage.className = `p-4 rounded-lg border mb-6 status-${type}`;
            statusText.textContent = message;
            
            const icons = {
                success: '‚úÖ',
                error: '‚ùå',
                warning: '‚ö†Ô∏è',
                info: '‚ÑπÔ∏è'
            };
            statusIcon.textContent = icons[type] || '‚ÑπÔ∏è';
            
            statusMessage.classList.remove('hidden');
            
            if (duration > 0) {
                setTimeout(() => statusMessage.classList.add('hidden'), duration);
            }
        }

        function hideLoading() {
            console.log('Hiding loading screen...');
            const loadingScreen = document.getElementById('loading-screen');
            const loginScreen = document.getElementById('login-screen');
            
            if (loadingScreen) {
                loadingScreen.style.display = 'none';
                console.log('Loading screen hidden');
            }
            
            if (loginScreen) {
                loginScreen.style.display = 'block';
                loginScreen.classList.remove('hidden');
                console.log('Login screen shown');
            }
        }

        function formatCurrency(amount) {
            return new Intl.NumberFormat('th-TH', {
                style: 'currency',
                currency: 'THB',
                minimumFractionDigits: 0
            }).format(amount);
        }

        function formatDuration(minutes) {
            const hours = Math.floor(minutes / 60);
            const mins = minutes % 60;
            return hours > 0 ? `${hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ${mins} ‡∏ô‡∏≤‡∏ó‡∏µ` : `${mins} ‡∏ô‡∏≤‡∏ó‡∏µ`;
        }

        function setDefaultDates() {
            const today = new Date();
            const todayStr = today.toISOString().split('T')[0];
            const monthStr = today.toISOString().substring(0, 7);
            
            document.getElementById('daily-date').value = todayStr;
            document.getElementById('monthly-period').value = monthStr;
        }

        // Authentication
        async function handleLogin(e) {
            e.preventDefault();
            const pin = document.getElementById('pin-input').value;
            const submitBtn = e.target.querySelector('button[type="submit"]');
            
            if (pin.length !== 4) {
                showStatus('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™ PIN 4 ‡∏´‡∏•‡∏±‡∏Å', 'error');
                return;
            }

            submitBtn.disabled = true;
            submitBtn.textContent = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö...';

            try {
                const result = await apiGet('staffLogin', { pin });
                if (result.success) {
                    state.staff = result.data;
                    document.getElementById('staff-badge').textContent = `üë®‚Äçüíº ${state.staff.staffName}`;
                    document.getElementById('login-screen').classList.add('hidden');
                    document.getElementById('reports-interface').classList.remove('hidden');
                    showStatus(`‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö ${state.staff.staffName}!`, 'success');
                    
                    // Load initial data
                    switchTab('dashboard');
                    startAutoRefresh();
                } else {
                    showStatus(result.message, 'error');
                }
            } catch (error) {
                showStatus(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`, 'error');
            } finally {
                submitBtn.disabled = false;
                submitBtn.textContent = '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö';
            }
        }

        // Tab Management
        function switchTab(tabName) {
            state.currentTab = tabName;
            
            // Update tab buttons
            document.querySelectorAll('.tab-button').forEach(btn => {
                btn.classList.remove('active');
            });
            document.getElementById(`tab-${tabName}`).classList.add('active');
            
            // Update tab content
            document.querySelectorAll('.tab-content').forEach(content => {
                content.classList.add('hidden');
            });
            document.getElementById(`${tabName}-tab-content`).classList.remove('hidden');
            
            // Load data for active tab
            loadTabData(tabName);
        }

        async function loadTabData(tabName) {
            showStatus('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...', 'info', 0);
            
            try {
                switch(tabName) {
                    case 'dashboard':
                        await loadDashboardData();
                        break;
                    case 'customers':
                        await loadCustomersData();
                        break;
                }
                
                document.getElementById('status-message').classList.add('hidden');
            } catch (error) {
                showStatus(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${error.message}`, 'error');
            }
        }

        // Dashboard Data Loading
        async function loadDashboardData() {
            try {
                // Load dashboard stats
                await Promise.all([
                    loadTodayStatsReal(),
                    loadActiveSessionsTableReal(),
                    loadTodayChartReal()
                ]);
            } catch (error) {
                console.error('Dashboard loading error:', error);
                throw error;
            }
        }

        async function loadTodayStatsReal() {
            try {
                const branch = document.getElementById('branch-filter').value;
                const result = await apiGet('getDashboardStats', { branch });
                
                if (result.success) {
                    const stats = result.data;
                    document.getElementById('active-sessions').textContent = stats.activeSessions;
                    document.getElementById('today-revenue').textContent = formatCurrency(stats.todayRevenue);
                    document.getElementById('today-customers').textContent = stats.todayCustomers;
                    document.getElementById('avg-duration').textContent = formatDuration(stats.avgDuration);
                } else {
                    throw new Error(result.message);
                }
            } catch (error) {
                console.error('Error loading today stats:', error);
                // Fall back to zero values
                document.getElementById('active-sessions').textContent = '0';
                document.getElementById('today-revenue').textContent = formatCurrency(0);
                document.getElementById('today-customers').textContent = '0';
                document.getElementById('avg-duration').textContent = formatDuration(0);
            }
        }

        async function loadActiveSessionsTableReal() {
            const tableBody = document.getElementById('active-sessions-table');
            
            try {
                const branch = document.getElementById('branch-filter').value;
                const result = await apiGet('getActiveSessions', { branch });
                
                if (result.success && result.data.length > 0) {
                    tableBody.innerHTML = result.data.map(session => `
                        <tr class="border-b hover:bg-gray-50">
                            <td class="px-4 py-3 font-mono text-sm">${session.sessionId}</td>
                            <td class="px-4 py-3">${session.branch}</td>
                            <td class="px-4 py-3">${session.table}</td>
                            <td class="px-4 py-3">${session.customer}${session.playerCount > 1 ? ` (+${session.playerCount - 1})` : ''}</td>
                            <td class="px-4 py-3">${formatDuration(session.duration)}</td>
                            <td class="px-4 py-3">
                                <span class="px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs">
                                    ${session.status}
                                </span>
                            </td>
                        </tr>
                    `).join('');
                } else {
                    tableBody.innerHTML = `
                        <tr>
                            <td colspan="6" class="px-4 py-8 text-center text-gray-500">‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà</td>
                        </tr>
                    `;
                }
            } catch (error) {
                console.error('Error loading active sessions:', error);
                tableBody.innerHTML = `
                    <tr>
                        <td colspan="6" class="px-4 py-8 text-center text-red-500">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</td>
                    </tr>
                `;
            }
        }

        async function loadTodayChartReal() {
            const ctx = document.getElementById('today-chart').getContext('2d');
            
            // Destroy existing chart if it exists
            if (state.charts.todayChart) {
                state.charts.todayChart.destroy();
            }
            
            try {
                const today = new Date().toISOString().split('T')[0];
                const branch = document.getElementById('branch-filter').value;
                const result = await apiGet('getDailyReport', { date: today, branch });
                
                let hourlyData = new Array(12).fill(0); // 9 AM to 8 PM
                const labels = ['09:00', '10:00', '11:00', '12:00', '13:00', '14:00', '15:00', '16:00', '17:00', '18:00', '19:00', '20:00'];
                
                if (result.success && result.data.hourlyRevenue) {
                    // Map 24-hour data to business hours (9 AM - 8 PM)
                    for (let i = 0; i < 12; i++) {
                        const hour = i + 9; // 9 AM = index 9
                        hourlyData[i] = result.data.hourlyRevenue[hour] || 0;
                    }
                }
                
                const chartData = {
                    labels: labels,
                    datasets: [{
                        label: '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ (‡∏ö‡∏≤‡∏ó)',
                        data: hourlyData,
                        borderColor: 'rgb(59, 130, 246)',
                        backgroundColor: 'rgba(59, 130, 246, 0.1)',
                        tension: 0.4,
                        fill: true
                    }]
                };
                
                state.charts.todayChart = new Chart(ctx, {
                    type: 'line',
                    data: chartData,
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                display: false
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    callback: function(value) {
                                        return '‡∏ø' + value;
                                    }
                                }
                            }
                        }
                    }
                });
            } catch (error) {
                console.error('Error loading today chart:', error);
                // Create empty chart
                state.charts.todayChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: ['09:00', '10:00', '11:00', '12:00', '13:00', '14:00', '15:00', '16:00', '17:00', '18:00', '19:00', '20:00'],
                        datasets: [{
                            label: '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ (‡∏ö‡∏≤‡∏ó)',
                            data: new Array(12).fill(0),
                            borderColor: 'rgb(59, 130, 246)',
                            backgroundColor: 'rgba(59, 130, 246, 0.1)'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: { legend: { display: false } },
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: { callback: function(value) { return '‡∏ø' + value; } }
                            }
                        }
                    }
                });
            }
        }00', '16:00', '17:00', '18:00', '19:00', '20:00'],
                datasets: [{
                    label: '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ (‡∏ö‡∏≤‡∏ó)',
                    data: [120, 190, 300, 500, 200, 300, 450, 680, 590, 420, 380, 250],
                    borderColor: 'rgb(59, 130, 246)',
                    backgroundColor: 'rgba(59, 130, 246, 0.1)',
                    tension: 0.4,
                    fill: true
                }]
            };
            
            state.charts.todayChart = new Chart(ctx, {
                type: 'line',
                data: hourlyData,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return '‡∏ø' + value;
                                }
                            }
                        }
                    }
                }
            });
        }

        // Daily Reports Data Loading
        async function loadDailyData() {
            const selectedDate = document.getElementById('daily-date').value;
            
            try {
                await Promise.all([
                    loadDailyStatsReal(selectedDate),
                    loadHourlyChartReal(selectedDate),
                    loadPopularItemsReal(selectedDate)
                ]);
            } catch (error) {
                console.error('Daily data loading error:', error);
                throw error;
            }
        }

        async function loadDailyStatsReal(date) {
            try {
                const branch = document.getElementById('branch-filter').value;
                const result = await apiGet('getDailyReport', { date, branch });
                
                if (result.success) {
                    const stats = result.data;
                    document.getElementById('daily-revenue').textContent = formatCurrency(stats.revenue);
                    document.getElementById('daily-sessions').textContent = stats.sessions;
                    document.getElementById('daily-customers-count').textContent = stats.customers;
                    document.getElementById('daily-members').textContent = stats.members;
                    document.getElementById('daily-avg-duration').textContent = `${stats.avgDuration} ‡∏ô‡∏≤‡∏ó‡∏µ`;
                } else {
                    throw new Error(result.message);
                }
            } catch (error) {
                console.error('Error loading daily stats:', error);
                // Set to zero if error
                document.getElementById('daily-revenue').textContent = formatCurrency(0);
                document.getElementById('daily-sessions').textContent = '0';
                document.getElementById('daily-customers-count').textContent = '0';
                document.getElementById('daily-members').textContent = '0';
                document.getElementById('daily-avg-duration').textContent = '0 ‡∏ô‡∏≤‡∏ó‡∏µ';
            }
        }

        async function loadHourlyChartReal(date) {
            const ctx = document.getElementById('hourly-chart').getContext('2d');
            
            if (state.charts.hourlyChart) {
                state.charts.hourlyChart.destroy();
            }
            
            try {
                const branch = document.getElementById('branch-filter').value;
                const result = await apiGet('getDailyReport', { date, branch });
                
                let hourlyData = new Array(12).fill(0); // 9 AM to 8 PM
                const labels = ['09:00', '10:00', '11:00', '12:00', '13:00', '14:00', '15:00', '16:00', '17:00', '18:00', '19:00', '20:00'];
                
                if (result.success && result.data.hourlyRevenue) {
                    // Map 24-hour data to business hours (9 AM - 8 PM)
                    for (let i = 0; i < 12; i++) {
                        const hour = i + 9; // 9 AM = index 9
                        hourlyData[i] = result.data.hourlyRevenue[hour] || 0;
                    }
                }
                
                const chartData = {
                    labels: labels,
                    datasets: [{
                        label: '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ',
                        data: hourlyData,
                        backgroundColor: 'rgba(34, 197, 94, 0.8)',
                        borderColor: 'rgb(34, 197, 94)',
                        borderWidth: 2
                    }]
                };
                
                state.charts.hourlyChart = new Chart(ctx, {
                    type: 'bar',
                    data: chartData,
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                display: false
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    callback: function(value) {
                                        return '‡∏ø' + value;
                                    }
                                }
                            }
                        }
                    }
                });
            } catch (error) {
                console.error('Error loading hourly chart:', error);
                // Create empty chart
                state.charts.hourlyChart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: ['09:00', '10:00', '11:00', '12:00', '13:00', '14:00', '15:00', '16:00', '17:00', '18:00', '19:00', '20:00'],
                        datasets: [{
                            label: '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ',
                            data: new Array(12).fill(0),
                            backgroundColor: 'rgba(34, 197, 94, 0.8)'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: { legend: { display: false } },
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: { callback: function(value) { return '‡∏ø' + value; } }
                            }
                        }
                    }
                });
            }
        }

        async function loadPopularItemsReal(date) {
            try {
                const branch = document.getElementById('branch-filter').value;
                const result = await apiGet('getDailyReport', { date, branch });
                
                if (result.success) {
                    // Popular tickets
                    const popularTickets = result.data.popularTickets || [];
                    
                    if (popularTickets.length > 0) {
                        const ticketsHtml = popularTickets.map((ticket, index) => `
                            <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                                <div class="flex items-center space-x-3">
                                    <div class="w-8 h-8 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-sm font-bold">
                                        ${index + 1}
                                    </div>
                                    <span class="font-medium">${ticket.name}</span>
                                </div>
                                <div class="text-right">
                                    <div class="font-semibold">${ticket.count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</div>
                                    <div class="text-sm text-gray-500">${ticket.percentage}%</div>
                                </div>
                            </div>
                        `).join('');
                        document.getElementById('popular-tickets').innerHTML = ticketsHtml;
                    } else {
                        document.getElementById('popular-tickets').innerHTML = '<div class="text-center text-gray-500 py-4">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>';
                    }
                    
                    // Popular branches
                    const popularBranches = result.data.popularBranches || [];
                    
                    if (popularBranches.length > 0) {
                        const branchesHtml = popularBranches.map((branch, index) => `
                            <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                                <div class="flex items-center space-x-3">
                                    <div class="w-8 h-8 bg-green-100 text-green-600 rounded-full flex items-center justify-center text-sm font-bold">
                                        ${index + 1}
                                    </div>
                                    <span class="font-medium">${branch.name}</span>
                                </div>
                                <div class="text-right">
                                    <div class="font-semibold">${formatCurrency(branch.revenue)}</div>
                                    <div class="text-sm text-gray-500">${branch.percentage}%</div>
                                </div>
                            </div>
                        `).join('');
                        document.getElementById('popular-branches').innerHTML = branchesHtml;
                    } else {
                        document.getElementById('popular-branches').innerHTML = '<div class="text-center text-gray-500 py-4">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>';
                    }
                } else {
                    throw new Error(result.message);
                }
            } catch (error) {
                console.error('Error loading popular items:', error);
                document.getElementById('popular-tickets').innerHTML = '<div class="text-center text-red-500 py-4">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>';
                document.getElementById('popular-branches').innerHTML = '<div class="text-center text-red-500 py-4">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>';
            }
        }

        // Monthly Reports Data Loading
        async function loadMonthlyData() {
            const selectedMonth = document.getElementById('monthly-period').value;
            
            try {
                await Promise.all([
                    loadMonthlyStatsReal(selectedMonth),
                    loadMonthlyTrendChartReal(selectedMonth),
                    loadBranchPerformanceChartReal(selectedMonth)
                ]);
            } catch (error) {
                console.error('Monthly data loading error:', error);
                throw error;
            }
        }

        async function loadMonthlyStatsReal(month) {
            try {
                const branch = document.getElementById('branch-filter').value;
                const result = await apiGet('getMonthlyReport', { month, branch });
                
                if (result.success) {
                    const stats = result.data;
                    document.getElementById('monthly-revenue').textContent = formatCurrency(stats.revenue);
                    document.getElementById('monthly-customers').textContent = stats.customers;
                    document.getElementById('monthly-sessions').textContent = stats.sessions;
                    document.getElementById('monthly-daily-avg').textContent = formatCurrency(stats.dailyAvg);
                    
                    const growthText = stats.revenueGrowth >= 0 ? `+${stats.revenueGrowth}%` : `${stats.revenueGrowth}%`;
                    document.getElementById('monthly-growth').textContent = `${growthText} ‡∏à‡∏≤‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô`;
                    document.getElementById('monthly-customer-growth').textContent = `${stats.customers} ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤`;
                    document.getElementById('monthly-session-growth').textContent = `${stats.sessions} ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô`;
                } else {
                    throw new Error(result.message);
                }
            } catch (error) {
                console.error('Error loading monthly stats:', error);
                // Set to zero if error
                document.getElementById('monthly-revenue').textContent = formatCurrency(0);
                document.getElementById('monthly-customers').textContent = '0';
                document.getElementById('monthly-sessions').textContent = '0';
                document.getElementById('monthly-daily-avg').textContent = formatCurrency(0);
                document.getElementById('monthly-growth').textContent = '0% ‡∏à‡∏≤‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô';
                document.getElementById('monthly-customer-growth').textContent = '0 ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà';
                document.getElementById('monthly-session-growth').textContent = '0 ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡πà‡∏ô';
            }
        }

        async function loadMonthlyTrendChartReal(month) {
            const ctx = document.getElementById('monthly-trend-chart').getContext('2d');
            
            if (state.charts.monthlyTrendChart) {
                state.charts.monthlyTrendChart.destroy();
            }
            
            try {
                const branch = document.getElementById('branch-filter').value;
                const result = await apiGet('getMonthlyReport', { month, branch });
                
                let weeklyRevenue = [0, 0, 0, 0];
                let weeklyCustomers = [0, 0, 0, 0];
                
                if (result.success) {
                    weeklyRevenue = result.data.weeklyRevenue.slice(0, 4);
                    weeklyCustomers = result.data.weeklyCustomers.slice(0, 4);
                }
                
                const monthlyData = {
                    labels: ['‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå 1', '‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå 2', '‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå 3', '‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå 4'],
                    datasets: [
                        {
                            label: '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ',
                            data: weeklyRevenue,
                            borderColor: 'rgb(59, 130, 246)',
                            backgroundColor: 'rgba(59, 130, 246, 0.1)',
                            yAxisID: 'y',
                            tension: 0.4
                        },
                        {
                            label: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',
                            data: weeklyCustomers,
                            borderColor: 'rgb(34, 197, 94)',
                            backgroundColor: 'rgba(34, 197, 94, 0.1)',
                            yAxisID: 'y1',
                            tension: 0.4
                        }
                    ]
                };
                
                state.charts.monthlyTrendChart = new Chart(ctx, {
                    type: 'line',
                    data: monthlyData,
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        interaction: {
                            mode: 'index',
                            intersect: false,
                        },
                        scales: {
                            y: {
                                type: 'linear',
                                display: true,
                                position: 'left',
                                ticks: {
                                    callback: function(value) {
                                        return '‡∏ø' + value.toLocaleString();
                                    }
                                }
                            },
                            y1: {
                                type: 'linear',
                                display: true,
                                position: 'right',
                                grid: {
                                    drawOnChartArea: false,
                                },
                                ticks: {
                                    callback: function(value) {
                                        return value + ' ‡∏Ñ‡∏ô';
                                    }
                                }
                            }
                        }
                    }
                });
            } catch (error) {
                console.error('Error loading monthly trend chart:', error);
                // Create empty chart
                state.charts.monthlyTrendChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: ['‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå 1', '‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå 2', '‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå 3', '‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå 4'],
                        datasets: [
                            {
                                label: '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ',
                                data: [0, 0, 0, 0],
                                borderColor: 'rgb(59, 130, 246)',
                                backgroundColor: 'rgba(59, 130, 246, 0.1)',
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: { callback: function(value) { return '‡∏ø' + value; } }
                            }
                        }
                    }
                });
            }
        }

        async function loadBranchPerformanceChartReal(month) {
            const ctx = document.getElementById('branch-performance-chart').getContext('2d');
            
            if (state.charts.branchPerformanceChart) {
                state.charts.branchPerformanceChart.destroy();
            }
            
            try {
                const result = await apiGet('getMonthlyReport', { month });
                
                let labels = [];
                let data = [];
                let colors = [
                    'rgba(59, 130, 246, 0.8)',
                    'rgba(34, 197, 94, 0.8)',
                    'rgba(168, 85, 247, 0.8)',
                    'rgba(249, 115, 22, 0.8)'
                ];
                
                if (result.success && result.data.branchRevenue) {
                    const branchData = Object.entries(result.data.branchRevenue);
                    labels = branchData.map(([name, revenue]) => name);
                    data = branchData.map(([name, revenue]) => revenue);
                }
                
                if (data.length === 0) {
                    labels = ['‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'];
                    data = [1];
                    colors = ['rgba(156, 163, 175, 0.8)'];
                }
                
                const branchData = {
                    labels: labels,
                    datasets: [
                        {
                            label: '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ',
                            data: data,
                            backgroundColor: colors.slice(0, labels.length),
                            borderWidth: 2
                        }
                    ]
                };
                
                state.charts.branchPerformanceChart = new Chart(ctx, {
                    type: 'doughnut',
                    data: branchData,
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'bottom'
                            }
                        }
                    }
                });
            } catch (error) {
                console.error('Error loading branch performance chart:', error);
                // Create empty chart
                state.charts.branchPerformanceChart = new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: ['‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'],
                        datasets: [{
                            data: [1],
                            backgroundColor: ['rgba(156, 163, 175, 0.8)']
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: { legend: { position: 'bottom' } }
                    }
                });
            }
        }

        // Customers Data Loading
        async function loadCustomersData() {
            try {
                await Promise.all([
                    loadCustomerStatsReal(),
                    loadTopCustomersTableReal()
                ]);
            } catch (error) {
                console.error('Customers data loading error:', error);
                throw error;
            }
        }

        async function loadCustomerStatsReal() {
            try {
                const result = await apiGet('getCustomerStats');
                
                if (result.success) {
                    const stats = result.data;
                    document.getElementById('total-members').textContent = stats.totalMembers;
                    document.getElementById('new-members').textContent = stats.newMembers;
                    document.getElementById('regular-customers').textContent = stats.regularCustomers;
                } else {
                    throw new Error(result.message);
                }
            } catch (error) {
                console.error('Error loading customer stats:', error);
                document.getElementById('total-members').textContent = '0';
                document.getElementById('new-members').textContent = '0';
                document.getElementById('regular-customers').textContent = '0';
            }
        }

        async function loadTopCustomersTableReal() {
            const tableBody = document.getElementById('top-customers-table');
            
            try {
                const result = await apiGet('getTopCustomers', { limit: 10 });
                
                if (result.success && result.data.length > 0) {
                    tableBody.innerHTML = result.data.map(customer => `
                        <tr class="border-b hover:bg-gray-50">
                            <td class="px-4 py-3">
                                <div class="w-8 h-8 bg-yellow-100 text-yellow-600 rounded-full flex items-center justify-center font-bold">
                                    ${customer.rank}
                                </div>
                            </td>
                            <td class="px-4 py-3 font-medium">${customer.name}</td>
                            <td class="px-4 py-3 font-mono text-sm">${customer.customerId}</td>
                            <td class="px-4 py-3">${customer.sessions} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</td>
                            <td class="px-4 py-3">${formatDuration(customer.totalTime)}</td>
                            <td class="px-4 py-3 font-semibold text-green-600">${formatCurrency(customer.totalSpent)}</td>
                        </tr>
                    `).join('');
                } else {
                    tableBody.innerHTML = `
                        <tr>
                            <td colspan="6" class="px-4 py-8 text-center text-gray-500">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</td>
                        </tr>
                    `;
                }
            } catch (error) {
                console.error('Error loading top customers:', error);
                tableBody.innerHTML = `
                    <tr>
                        <td colspan="6" class="px-4 py-8 text-center text-red-500">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</td>
                    </tr>
                `;
            }
        }                        astVille'],
                datasets: [
                    {
                        label: '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ',
                        data: [32500, 28900, 18750, 9500],
                        backgroundColor: [
                            'rgba(59, 130, 246, 0.8)',
                            'rgba(34, 197, 94, 0.8)',
                            'rgba(168, 85, 247, 0.8)',
                            'rgba(249, 115, 22, 0.8)'
                        ],
                        borderWidth: 2
                    }
                ]
            };
            
            state.charts.branchPerformanceChart = new Chart(ctx, {
                type: 'doughnut',
                data: branchData,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });
        }

        // Customers Data Loading
        async function loadCustomersData() {
            try {
                await Promise.all([
                    loadCustomerStats(),
                    loadTopCustomersTable()
                ]);
            } catch (error) {
                console.error('Customers data loading error:', error);
                throw error;
            }
        }

        async function loadCustomerStats() {
            // Simulate customer stats
            const stats = {
                totalMembers: 1247,
                newMembers: 23,
                regularCustomers: 156
            };
            
            document.getElementById('total-members').textContent = stats.totalMembers;
            document.getElementById('new-members').textContent = stats.newMembers;
            document.getElementById('regular-customers').textContent = stats.regularCustomers;
        }

        async function loadTopCustomersTable() {
            const tableBody = document.getElementById('top-customers-table');
            
            // Simulate top customers data
            const topCustomers = [
                {
                    rank: 1,
                    name: '‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ',
                    customerId: '01240001',
                    sessions: 23,
                    totalTime: 1840,
                    totalSpent: 8450
                },
                {
                    rank: 2,
                    name: '‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡∏£‡∏±‡∏Å‡πÄ‡∏Å‡∏°',
                    customerId: '01240002',
                    sessions: 19,
                    totalTime: 1520,
                    totalSpent: 7200
                },
                {
                    rank: 3,
                    name: '‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏õ‡∏≠‡∏á ‡πÄ‡∏•‡πà‡∏ô‡∏î‡∏µ',
                    customerId: '01240003',
                    sessions: 17,
                    totalTime: 1380,
                    totalSpent: 6580
                }
            ];
            
            tableBody.innerHTML = topCustomers.map(customer => `
                <tr class="border-b hover:bg-gray-50">
                    <td class="px-4 py-3">
                        <div class="w-8 h-8 bg-yellow-100 text-yellow-600 rounded-full flex items-center justify-center font-bold">
                            ${customer.rank}
                        </div>
                    </td>
                    <td class="px-4 py-3 font-medium">${customer.name}</td>
                    <td class="px-4 py-3 font-mono text-sm">${customer.customerId}</td>
                    <td class="px-4 py-3">${customer.sessions} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</td>
                    <td class="px-4 py-3">${formatDuration(customer.totalTime)}</td>
                    <td class="px-4 py-3 font-semibold text-green-600">${formatCurrency(customer.totalSpent)}</td>
                </tr>
            `).join('');
        }

        // Auto Refresh
        function startAutoRefresh() {
            // Refresh dashboard every 30 seconds
            state.updateInterval = setInterval(() => {
                if (state.currentTab === 'dashboard') {
                    loadDashboardData();
                }
            }, 30000);
        }

        function stopAutoRefresh() {
            if (state.updateInterval) {
                clearInterval(state.updateInterval);
                state.updateInterval = null;
            }
        }

        // Export Functions
        function exportDailyReport() {
            const date = document.getElementById('daily-date').value;
            showStatus(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô ${date}...`, 'info');
            
            // Here you would call your backend to generate and download the report
            setTimeout(() => {
                showStatus('‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success');
            }, 2000);
        }

        function exportMonthlyReport() {
            const month = document.getElementById('monthly-period').value;
            showStatus(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ${month}...`, 'info');
            
            // Here you would call your backend to generate and download the report
            setTimeout(() => {
                showStatus('‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success');
            }, 2000);
        }

        // Event Listeners
        function setupEventListeners() {
            // Login
            document.getElementById('login-form').addEventListener('submit', handleLogin);
            
            // Tab navigation
            document.getElementById('tab-dashboard').addEventListener('click', () => switchTab('dashboard'));
            document.getElementById('tab-daily').addEventListener('click', () => switchTab('daily'));
            document.getElementById('tab-monthly').addEventListener('click', () => switchTab('monthly'));
            document.getElementById('tab-customers').addEventListener('click', () => switchTab('customers'));
            
            // Refresh button
            document.getElementById('refresh-btn').addEventListener('click', () => {
                loadTabData(state.currentTab);
            });
            
            // Date changes
            document.getElementById('daily-date').addEventListener('change', () => {
                if (state.currentTab === 'daily') {
                    loadDailyData();
                }
            });
            
            document.getElementById('monthly-period').addEventListener('change', () => {
                if (state.currentTab === 'monthly') {
                    loadMonthlyData();
                }
            });
            
            // Branch filter
            document.getElementById('branch-filter').addEventListener('change', () => {
                loadTabData(state.currentTab);
            });
            
            // Export buttons
            document.getElementById('daily-export').addEventListener('click', exportDailyReport);
            document.getElementById('monthly-export').addEventListener('click', exportMonthlyReport);
            
            // PIN input - auto submit when 4 digits entered
            document.getElementById('pin-input').addEventListener('input', (e) => {
                if (e.target.value.length === 4) {
                    document.getElementById('login-form').dispatchEvent(new Event('submit'));
                }
            });
        }

        // Cleanup on page unload
        window.addEventListener('beforeunload', () => {
            stopAutoRefresh();
            // Destroy all charts
            Object.values(state.charts).forEach(chart => {
                if (chart) chart.destroy();
            });
        });
    </script>
</body>
</html>
